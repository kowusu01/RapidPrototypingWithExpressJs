openapi: "3.0.2"

info:
  title: Sample API to return fake student data
  description: |- 
      For demonstration purpose, the data is hardcoded in the service.
  version: "1.0"

servers:
  - url: http://localhost:3500/api

tags:
    - name: Student
      description: the student endpoint

# route definitions
paths:

   /student/{id}:    
    get:
      description: get a student with the given id 
      tags:
        - "Student"
      parameters:
      - name: id
        in: path
        schema:
          type: number
        required: true
      responses:
        '200':  
          description: OK
          content:
            application/json:
              schema: 
               $ref: '#/components/schemas/singleStudentResponseSchema'
        '404': 
           description: response format for 404 (not found)
           content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/notFoundResponseSchema'  
        '500': 
           description: response format for 500 (errors)
           content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/errorResponseSchema'

   /student/list/page/{page}:
    get:
      description: 'get a list of students, if there are many students, do not return all, return page at a time. example: /student/page/1'
      tags:
        - "Student"
      parameters:
      - name: page
        in: path
        schema:
            type: number
        required: true
        example: 1
      responses:
        "200":
          description: OK         
          content:
            application/json:
              schema: 
               $ref: '#/components/schemas/studentListResponseSchema'  
        '404': 
           description: response format for 404 (not found)
           content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/notFoundResponseSchema'  
        '500': 
           description: response format for 500 (errors)
           content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/errorResponseSchema'
   
   /student/status/{status}/page/{page}:
    get:
      description: 'get a list of students with a given status, if there are many students, do not return all, return page at a time. example: /student/status/1/page/1'
      tags:
        - "Student" 
      parameters:
        - name: status
          in: path
          schema:
            type: number
          required: true
        - name: page
          in: path
          schema:
            type: number
          required: true
      responses:
          '200': 
            description: OK
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/studentListResponseSchema'  
          '404': 
            description: response for 404 (item not found)
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/notFoundResponseSchema'  
          '500': 
            description:  response for 500 (errors)
            content:
              application/json:
                schema: 
                  $ref: '#/components/schemas/errorResponseSchema' 

# components
components:

  # schemas
  schemas:

    # not found message schema
    notFoundResponseSchema:
      description: common schema for error responses, 404
      type: object
      properties:
        status_code:
           description: describes not found 401 http status code
           type: integer
           example: 404
        message_code:
           description: describes an application internal code
           type: string
           example: MSG_CODE_ITEM_NOT_FOUND
        message:
          description: a simple 404 message
          type: string
          example: item not found
    
    # error message schema
    errorResponseSchema:
      description: common schema for error responses 500
      type: object
      properties:
        status_code:
          description: describes error 500 http status code
          type: integer
          example: 500
        message_code:
           description: describes an application internal code
           type: string
           example: MSG_CODE_INTERNAL_ERROR
        message:
          description: a message describing the error
          type: string
          example: some unknown error occurred

    # schema for returning single object
    singleStudentResponseSchema:
      description: 'standard schema for returning a single object, e.g. single student.  note: all responses include some metadata'
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/singleItemResponseMetadata'
        student:
          $ref: '#/components/schemas/studentSchema'
  
  # schema for returning list of objects
    studentListResponseSchema:
      description: 'schema for returning a list of objects, e.g. list of students.  note: all responses include some metadata'
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/listResponseMetadata'
        students:
          type: array
          items:
            $ref: '#/components/schemas/studentSchema'
    
    # student schema
    studentSchema:
      description: schema for student object
      type: object
      properties:
         ID:
          $ref: '#/components/schemas/integerIdentifier'
         FirstName:
          $ref: '#/components/schemas/personFirstName'
         LastName:
          $ref: '#/components/schemas/personLastName'
         DateAdded: 
           description: date student was added to system
           type: string
           example: 2022-01-31
         IsActive:
          $ref: '#/components/schemas/personStatus'          
    
    # schema for metadata added to single item response
    singleItemResponseMetadata:
      description: schema for describing metadata added to response objects
      type: object
      properties:
        status_code:
          description: describes http status code
          type: integer
          example: 200
        message_code:
          description: describes an application internal code
          type: string
          example: MSG_CODE_OK
        message:
          description: an informational message or error message
          type: string
          example: 1 item were found
        request_description:
          description: short description of the request
          type: string
          example: find a student
        resource_location:
          description: http location or relative api location where the requested resource can be found. this can be useful in microservices
          type: string
          example: /api/student
        result_type:
          type: string
          enum: [single_item, list]
          example: single_item

    # schema for  metadata added to list of objects response
    listResponseMetadata:
      description: schema for describing metadata added to response objects
      type: object
      properties:
        status_code:
          description: describes http status code
          type: integer
          example: 200
        message_code:
          description: describes an application internal code
          type: string
          example: MSG_CODE_OK
        message:
          description: an informational message or error message
          type: string
          example: 1000 items were found, items will be fetched in pages 
        request_description:
          description: short description of the request
          type: string
          example: return list of students with status 1 (active)
        resource_location:
          description: http location or relative api location where the requested resource can be found. this can be useful in microservices
          type: string
          example: /api/student
        result_type:
          enum:
            - [single_item, list]
          example: list
        page:
          description: current page in the pagination if a list
          type: string
          example: 1 of 10
        page_size:
           description: number of records to return at a time when dealing with large lists
           type: integer
           example: 1
           default: 1
        relevant_requests:
          description: list of relevant urls with respect to current request
          type: array
          items:
            type: string
          example: ['http://localhost:3500/api/student/list/page/2']  
  
  # common properties
    integerIdentifier:
      description: integer unique id for a person
      type: integer
      example: 101
    
    personFirstName:
      description: first name of a person
      type: string
      example: John
    
    personLastName:
      description: last name of a person
      type: string
      example: Smith
      
    personStatus:
      description: status of a person in the system, 1=active, 0=inactive
      type: integer
      enum: [0, 1]
      example: 1
      default: 1